-- (1) SHOW ME BOLLYWOOD MOVIES
SELECT* FROM MOVIES WHERE INDUSTRY = "BOLLYWOOD" ;
-- (2) COUNT OF BOLLYWOOD MOVIES
SELECT COUNT(*) FROM MOVIES WHERE INDUSTRY = 'BOLLYWOOD';

-- (3) SHOW ME HOLLYWOOD MOVIES
SELECT * FROM MOVIES WHERE INDUSTRY = 'HOLLYWOOD';
-- (4)  COUNT OF HOLLYWOOD MOVIES
SELECT COUNT(*) FROM MOVIES WHERE INDUSTRY='HOLLYWOOD';

-- (5) SELECT DISTINCT FROM MOVIES
SELECT DISTINCT INDUSTRY FROM MOVIES;
 
-- (6) SELECT MOVIES WHICH HAS NAME 'THOR'
SELECT * FROM MOVIES WHERE TITLE LIKE '%THOR%';

-- (7)PRINT ALL MOVIES TITLE AND RELEASE YEAR FOR ALL MARVEL STUDIOS MOVIES
SELECT TITLE, RELEASE_YEAR FROM MOVIES WHERE STUDIO = 'MARVEL_STUDIOS'; 

-- (8)PRINT ALL MOVIE THAT HAVE AVENGER IN THEIR NAME
SELECT * FROM MOVIES WHERE TITLE= '%AVENGER%';

-- (9)PRINT THE YEAR WHEN THE MOVIES "THE GODFATHER" WAS RELEASED
SELECT RELEASE_YEAR FROM MOVIES WHERE TITLE='THE GODFATHER';

-- (10)PRINT ALL DISTINCT MOVIES STUDIOS IN THE BOLLYWOOD INDUSTRY
SELECT DISTINCT STUDIO FROM MOVIES WHERE INDUSTRY ='BOLLYWOOD';

-- (11)MOVIES THAT HAVE RATING MORE THAN 9
SELECT * FROM MOVIES WHERE IMDB_RATING > 9;

-- (12) MOVIES THAT HAVE RATING BETWEEN 6 AND 8
SELECT * FROM MOVIES WHERE IMDB_RATING BETWEEN 6 AND 8;

-- (13) MOVIES WHOSE RELEASE YEAR IS 2022 OR RELEASE YEAR IS 2019 OR 2018
SELECT * 
FROM MOVIES 
WHERE RELEASE_YEAR IN (2022,2019,2018);

-- (14) NULL VALUES IN IMDB_RATING
SELECT * FROM MOVIES WHERE IMDB_RATING IS NULL;

-- (15) NOT NULL
SELECT * FROM MOVIES WHERE IMDB_RATING IS NOT NULL;

-- (16) HIGHEST MOVIE RATING IN BOLLYWOOD INDUSTRY
SELECT * FROM MOVIES WHERE INDUSTRY ='BOLLYWOOD'
ORDER BY IMDB_RATING;

-- (17) TOP 5 MOVIES HIGHEST RATING (BOLLYWOOD)
SELECT * FROM MOVIES WHERE INDUSTRY='BOLLYWOOD'
ORDER BY IMDB_RATING DESC LIMIT 5;

-- (18)I WANT TOP 5 MOVIES WITH HIGHEST RATING BUT FROM 2ND HIGHEST
SELECT * FROM MOVIES WHERE INDUSTRY = 'BOLLYWOOD'
ORDER BY IMDB_RATING DESC LIMIT 5 OFFSET 1;

-- (19) PRINT ALL MOVIES IN THE ORDER OF THEIR RELEASE YEAR (LATEST FIRST)
SELECT * FROM MOVIES
ORDER BY RELEASE_YEAR DESC;

-- (20) ALL MOVIES RELEASED IN THE YEAR 2022
SELECT * FROM MOVIES WHERE RELEASE_YEAR=2022;

-- (21)ALL MOVIES RELEASED AFETR 2020
SELECT* FROM MOVIES WHERE RELEASE_YEAR > 2022;

-- (22) ALL MOVIES AFTER THE YEAR 2020 THAT HAVE MORE THAN 8 RATING
SELECT * FROM MOVIES WHERE RELEASE_YEAR > 2020 AND IMDB_RATING >8; 

-- (23) SELECT ALL MOVIES THAT ARE BY MARVEL STUDIOS AND HOMBALE FLIMS
SELECT * FROM MOVIES WHERE STUDIO IN ('MARVEL STUDIOS' , 'HOMBALE FLIMS');

-- (24) SELECT ALL THOR MOVIES BY THEIR RELEASE YEAR
SELECT TITLE ,RELEASE_YEAR FROM MOVIES 
WHERE TITLE LIKE '%THOR%' 
ORDER BY RELEASE_YEAR;

-- (25) SELECT ALL MOVIES THAT ARE NOT FROM MARVEL STUDIOS
SELECT * FROM MOVIES 
WHERE STUDIO <>'MARVEL STUDIOS';

-- (26)HOW MANY MOVIES WERE RELEASED BETWEEN 2015 AND 2022
SELECT COUNT(*) FROM MOVIES WHERE RELEASE_YEAR BETWEEN 2015 AND 2022;

-- (27) PRINT EACH YEAR ALONG WITH THE NUMBERS OF MOVIE RELEASED IN THAT YEAR, STARTING FROM THE MOST RECENT YEAR
SELECT RELEASE_YEAR, COUNT(*) AS NO_OF_MOVIES
FROM MOVIES
GROUP BY RELEASE_YEAR
ORDER BY RELEASE_YEAR DESC;

-- (28) PRINT ALL THE YEARS WHERE MORE THAN 2 MOVIES WERE RELEASED
SELECT RELEASE_YEAR, COUNT(*) AS MOVIE_COUNT
FROM MOVIES 
GROUP BY RELEASE_YEAR
HAVING MOVIE_COUNT >2
ORDER BY MOVIE_COUNT DESC;

-- (33) SQL JOINS-INNER JOIN 
SELECT m.MOVIE_ID, TITLE,BUDGET,REVENUE,CURRENCY,UNIT
FROM MOVIES m
inner JOIN FINANCIALS f
ON m.MOVIE_ID = f.MOVIE_ID;

-- (34) RIGHT JOIN
SELECT f.movie_id, title, budget, revenue, currency, unit
from movies m
right join financials f
on m.movie_id = f.movie_id;

-- (35) FULL JOIN
SELECT m.MOVIE_ID, TITLE, BUDGET, REVENUE, CURRENCY, UNIT
FROM MOVIES m
LEFT JOIN FINANCIALS f
ON m.MOVIE_ID = f.MOVIE_ID

UNION

SELECT f.MOVIE_ID, TITLE, BUDGET, REVENUE, CURRENCY, UNIT
FROM MOVIES m 
RIGHT JOIN FINANCIALS f 
ON m.MOVIE_ID = f.MOVIE_ID;

-- (36) SQL INNER JOIN - SHOW ALL MOVIES WITH THEIR LANGUAGE NAMES

SELECT m.MOVIE_ID, m.TITLE, m.INDUSTRY, m.LANGUAGE_ID, l.NAME as language_name
FROM MOVIES m
INNER JOIN LANGUAGES l
ON m.language_id = l.language_id; 

-- (37) LEFT JOIN - SHOW ALL MOVIES WITH THEIR LANGUAGE NAMES
SELECT m.MOVIE_ID, m.TITLE, m.INDUSTRY, m.LANGUAGE_ID, l.NAME as language_name
FROM MOVIES m
LEFT JOIN LANGUAGES l
ON m.language_id = l.language_id; 

-- (38) UNION - SHOW ALL MOVIES WITH THEIR LANGUAGE NAMES
SELECT m.MOVIE_ID, m.TITLE, m.INDUSTRY, m.LANGUAGE_ID, l.NAME as language_name
FROM MOVIES m
LEFT JOIN LANGUAGES l
ON m.language_id = l.language_id

UNION

SELECT m.MOVIE_ID, m.TITLE, m.INDUSTRY, m.LANGUAGE_ID, l.NAME as language_name
FROM MOVIES m
RIGHT JOIN LANGUAGES l
ON m.language_id = l.language_id; 

-- (39) GIVE REPORT ON - MOVIE TITLE, BUDGET REVENUE, PROFIT
SELECT 
      m.MOVIE_ID, TITLE, budget, revenue, currency, unit, (revenue-budget ) as profit
      from movies m
      join financials f
      ON m.movie_id = f.movie_id;
      
-- (40) GIVE RESULT ONLY FOR BOLLYWOOD MOVIES
SELECT 
      m.MOVIE_ID, TITLE, BUDGET, REVENUE, INDUSTRY, CURRENCY, (REVENUE-BUDGET) AS PROFIT
FROM MOVIES m
JOIN FINANCIALS f
ON m.movie_id = f.movie_id
WHERE INDUSTRY = 'BOLLYWOOD' ;

-- (41) MOVIE MADE HIGHEST PROFIT IN BOLLYWOOD
SELECT 
      m.MOVIE_ID, TITLE, BUDGET, REVENUE, INDUSTRY, CURRENCY, (REVENUE-BUDGET) AS PROFIT
FROM MOVIES m
JOIN FINANCIALS f
ON m.movie_id = f.movie_id
WHERE INDUSTRY = 'BOLLYWOOD'
ORDER BY PROFIT DESC;

-- (42)NORMALISE CASE STATEMENT( PROFIT IN MILLIONS)
SELECT 
	m.movie_id, title, budget, revenue, currency, unit,
CASE
    WHEN UNIT= "THOUSANDS" THEN ROUND((REVENUE-BUDGET)/1000,1)
    WHEN UNIT= "BILLION" THEN ROUND((REVENUE-BUDGET)*1000,1)
    ELSE ROUND(REVENUE-BUDGET,1)
    
END AS PROFIT_MLN
FROM MOVIES m
JOIN FINANCIALS f
ON m.movie_id = f.movie_id
WHERE INDUSTRY="BOLLYWOOD"
ORDER BY PROFIT_MLN DESC;

-- (43) ERD - GROUP_CONCAT QUES- list all movies along with the names of their actors
SELECT 
	m.title, GROUP_CONCAT(a.NAME) AS ACTORS
FROM MOVIES m
JOIN MOVIE_ACTOR ma
ON ma.movie_id = m.movie_id
JOIN actors a
ON a.actor_id=ma.actor_id
group by m.movie_id;

-- (44) Show each actor with the list of movies they acted in and their total 
-- movie count, sorted by movie count.
SELECT
	a.name as actor_name, group_concat(m.title separator "|" )
    as movies,
    COUNT(m.title) as movie_count
     FROM ACTORS a
JOIN MOVIE_ACTOR ma 
ON ma.actor_id = a.actor_id
JOIN movies m
ON m.movie_id = ma.movie_id
GROUP BY a.actor_id
order by movie_count desc;

-- (45) Generate a report of all Hindi movies sorted by their revenue amount in millions
-- print movie name , revenue, currency, and unit- JOIN MORE THAN TWO TABLES

-- SUB QUERIES
-- (46) SELECT A MOVIE WITH HIGHEST IMDB_RATING
SELECT * FROM MOVIES 
WHERE IMDB_RATING = (SELECT MAX(IMDB_RATING) FROM MOVIES); 

-- (47) SELECT A MOVIE WITH LOWEST IMDB_RATING
SELECT * FROM movies
WHERE IMDB_RATING = (SELECT MIN(IMDB_RATING) FROM MOVIES);

-- (48)MAX AND MIN BOTH OF ABOVE QUESTIONS
SELECT * FROM MOVIES
WHERE IMDB_RATING IN (
(SELECT MAX(IMDB_RATING) FROM MOVIES),
(SELECT MIN(IMDB_RATING) FROM MOVIES)
);

-- (49) SELECT ALL THE ACTORS WHOSE AGE > 75 AND < 85
SELECT * 
FROM
(SELECT name,YEAR(CURDATE())-BIRTH_YEAR AS AGE from actors ) AS ACTORS_AGE
WHERE AGE > 70 AND AGE < 85 ;

-- (50) SELECT ACTORS WHO ACTED IN ANY OF THESE MOVIES ( 101,110,121)

SELECT * FROM ACTORS
WHERE ACTOR_ID = ANY (
SELECT ACTOR_ID FROM MOVIE_ACTOR WHERE MOVIE_ID IN (101,110,121));

-- (51) SELECT ALL MOVIES WHOSE RATING IS GREATER THAN *ANY* OF THE MARVEL MOVIES RATING
SELECT * FROM MOVIES 
WHERE IMDB_RATING > (SELECT MIN(IMDB_RATING)FROM movies
WHERE STUDIO = 'MARVEL STUDIOS');

-- (52) SELECT ALL MOVIES WHOSE RATING IS GREATER THAN *ALL* OF THE MARVEL MOVIES RATING
SELECT *FROM MOVIES 
WHERE IMDB_RATING > (SELECT MAX(IMDB_RATING) FROM movies
WHERE STUDIO = 'MARVEL STUDIOS');

-- (53) CO - RELATED SUBQUERY- SELECT THE ACTOR ID, ACTOR NAME AND THE TOTAL NO. OF MOVIES THEY ACTED IN
-- SOLVING QUES BY JOIN
SELECT a.ACTOR_ID, a.NAME, COUNT(*) AS MOVIES_COUNT
FROM MOVIE_ACTOR ma
JOIN ACTORS a 
ON a.ACTOR_ID = ma.ACTOR_ID
GROUP BY a.ACTOR_ID
ORDER BY MOVIES_COUNT DESC;

-- SOLVING BY SUBQUERY
SELECT 
      ACTOR_ID, NAME, (SELECT COUNT(*) FROM MOVIE_ACTOR WHERE ACTOR_ID = ACTORS.ACTOR_ID) AS MOVIES_COUNT
FROM ACTORS
ORDER BY MOVIES_COUNT DESC;

-- (54) SELECT ALL THE MOVIES WITH MIN AND MAX RELEASE_YEAR

SELECT * FROM MOVIES
WHERE RELEASE_YEAR = (SELECT MIN(RELEASE_YEAR) FROM MOVIES)
   OR RELEASE_YEAR = (SELECT MAX(RELEASE_YEAR) FROM MOVIES);

-- (55) SELECT ALL THE ROWS FROM THE MOVIES TABLE WHOSE IMDB_RATING IS HIGHER THAN THE AVERAGE RATING
SELECT * FROM MOVIES 
WHERE IMDB_RATING > (SELECT AVG(IMDB_RATING) FROM MOVIES);

-- (56)- CTE- GET ALL ACTORS WHOSE AGE IS BETWEEN 70 AND 85
WITH ACTORS_AGE AS (
SELECT 
      name as actor_name, year(curdate())-birth_year as age
FROM ACTORS)
SELECT ACTOR_NAME , AGE
FROM ACTORS_AGE
WHERE AGE > 70 AND AGE < 85;

-- (57)MOVIES THAT PRODUCE 500% OR MORE PROFIT AND THEIR RATING WAS LESS THAN AVG RATING FOR ALL MOVIES
SELECT 
     X.MOVIE_ID, X.PCT_PROFIT,
     Y.TITLE, Y.IMDB_RATING
FROM (SELECT *, (REVENUE-BUDGET)*100/BUDGET AS PCT_PROFIT FROM FINANCIALS)X

JOIN 
(SELECT * FROM MOVIES WHERE IMDB_RATING < (SELECT AVG(IMDB_RATING) FROM MOVIES))Y
ON X.MOVIE_ID = Y.MOVIE_ID
WHERE PCT_PROFIT >= 500;

-- (58) SELECT ALL HOLLYWOOD MOVIES RELEASED AFTER THE YEAR 2000 THAT MADE MORE THAN 500 MILLION $ PROFIT OR MORE PROFIT

WITH movie_data AS (
    SELECT 
        m.MOVIE_ID,
        m.TITLE,
        m.INDUSTRY,
        m.RELEASE_YEAR,
        f.REVENUE,
        f.BUDGET,
        (f.REVENUE - f.BUDGET) AS PROFIT
    FROM MOVIES m
    JOIN FINANCIALS f ON m.MOVIE_ID = f.MOVIE_ID
)
SELECT * 
FROM movie_data
WHERE INDUSTRY = 'Hollywood'
  AND RELEASE_YEAR > 2000
  AND PROFIT >= 500000000;
  
  -- (59) WRITE A A QUERY TO DISPLAY 6TH HIGHEST IMDB_RATING FROM MOVIES TABLE
  SELECT DISTINCT (IMDB_RATING), TITLE FROM MOVIES 
  ORDER BY IMDB_RATING DESC LIMIT 1 OFFSET 5;
  
  -- (60) WRITE A QUERY TO SELECT MOST YOUNGEST AND OLDEST 3 ACTORS FROM MOVIES DATABASES
(SELECT name, birth_year
 FROM actors 
 ORDER BY birth_year ASC LIMIT 3)
 UNION
 (SELECT name, birth_year 
 FROM actors 
 ORDER BY birth_year DESC LIMIT 3);




 
